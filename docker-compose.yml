version: "3.6"
name: kafka_environment

volumes:
  broker_1:
    external: false
  broker_2:
    external: false
  broker_3:
    external: false
  storage-service:
    external: false
  zookeeper-service:
    external: false
  zookeeper-log-service:
    external: false
  schema-registry-service:
    external: false
  mongo-service:
    external: false
  postgres-service:
    external: false
  ksql-service:
    external: false

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    networks:
      - clusternet
    user: root
    volumes:
      - zookeeper-service:/opt/zookeeper
      - zookeeper-service:/var/lib/zookeeper/data
      - zookeeper-log-service:/var/lib/zookeeper/log
      - zookeeper-service:/etc/zookeeper/secrets
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: always

  broker_1:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker-1
    container_name: broker_1
    restart: "always"
    networks:
      - clusternet
    ports:
      - 29092:29092
    depends_on:
      - zookeeper
    volumes:
      - broker_1:/opt/kafka
      - broker_1:/var/lib/kafka/data
      - broker_1:/etc/kafka/secrets
    user: root
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_SCHEMA_REGISTRY_URL: "schema-registry:8085"
      KAFKA_LISTENERS: EXTERNAL://:29092,INTERNAL://:9092,PLAINTEXT://:19092
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:29092,INTERNAL://broker-1:9092,PLAINTEXT://broker-1:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_MS: 259200000
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 1048576000

  broker_2:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker-2
    container_name: broker_2
    restart: "always"
    networks:
      - clusternet
    ports:
      - 29093:29093
    depends_on:
      - broker_1
    volumes:
      - broker_2:/opt/kafka
      - broker_2:/var/lib/kafka/data
      - broker_2:/etc/kafka/secrets 
    user: root
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_SCHEMA_REGISTRY_URL: "schema-registry:8085"
      KAFKA_LISTENERS: EXTERNAL://:29093,INTERNAL://:9093,PLAINTEXT://:19093
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:29093,INTERNAL://broker-2:9093,PLAINTEXT://broker-2:19093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_MS: 259200000
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 1048576000

  broker_3:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker-3
    container_name: broker_3
    restart: "always"
    networks:
      - clusternet
    ports:
      - 29094:29094
    depends_on:
      - broker_2
    volumes:
      - broker_3:/opt/kafka
      - broker_3:/var/lib/kafka/data
      - broker_3:/etc/kafka/secrets
    user: root
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_SCHEMA_REGISTRY_URL: "schema-registry:8085"
      KAFKA_LISTENERS: EXTERNAL://:29094,INTERNAL://:9094,PLAINTEXT://:19094
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:29094,INTERNAL://broker-3:9094,PLAINTEXT://broker-3:19094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_MS: 259200000
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 1048576000

  connect:
    build:
      context: .
      dockerfile: connect.Dockerfile
    ports:
      - "8083:8083"
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - broker_1
      - broker_2
      - broker_3
    user: root
    volumes:
      - storage-service:/opt/connect
      - storage-service:/etc/kafka-connect/jars
      - storage-service:/etc/kafka-connect/secrets
      - storage-service:/etc/kafka/secrets
      - storage-service:/var/lib/kafka/data
    networks:
      - clusternet
    environment:
      KAFKA_JMX_PORT: 35000
      KAFKA_JMX_HOSTNAME: broker
      CONNECT_BOOTSTRAP_SERVERS: "broker-1:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-cluster-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components,/usr/local/share/kafka/plugins/"
      CONNECT_CONNECTIONS_MAX_IDLE_MS: 180000
      CONNECT_METADATA_MAX_AGE_MS: 180000
      CONNECT_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONNECT_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
    restart: "always"

  schema-registry:
    image: confluentinc/cp-schema-registry:5.1.2
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - 8085:8085
    networks:
      - clusternet
    restart: always
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://broker-1:9092"
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
    volumes:
      - schema-registry-service:/etc/schema-registry/secrets

  mongo1:
    image: "mongodb-kafka-base-mongod:1.0"
    hostname: mongodb
    container_name: mongo1
    ports:
      - "27017:27017"
    build:
      context: .
      dockerfile: mongo.Dockerfile
    command: --replSet rs0 --oplogSize 128
    depends_on:
      - zookeeper
      - broker_1
      - broker_2
      - broker_3
      - connect
    user: root
    volumes:
      - mongo-service:/opt/mongo
      - mongo-service:/data/db
      - mongo-service:/data/configdb
    networks:
      - clusternet
    restart: always

  mongo1-setup:
    image: "mongodb-kafka-base-setup-mongod:1.0"
    container_name: mongo1-setup
    build:
      context: .
      dockerfile: mongo.Dockerfile
    depends_on:
      - mongo1
    networks:
      - clusternet
    volumes:
      - mongo-service:/opt/mongo
      - mongo-service:/data/db
      - mongo-service:/data/configdb
    entrypoint:
      [
        "bash",
        "-c",
        "sleep 10 && mongosh --host mongo1:27017 config-replica.js && sleep 10",
      ]
    restart: "no"

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - broker_1
      - broker_2
      - broker_3
      - connect
      - ksql
    networks:
      - clusternet
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker-1:9092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://connect:8083
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8085
      KAFKA_CLUSTERS_0_KSQLDBSERVER: http://ksql:8081
      DYNAMIC_CONFIG_ENABLED: "true"
    restart: always

  postgres:
    image: postgres:latest
    hostname: postgres
    container_name: postgres
    ports:
      - 5432:5432
    networks:
      - clusternet
    restart: always
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    environment:
      - POSTGRES_PASSWORD=postgres-pass
      - POSTGRES_USER=postgres
    volumes:
      - postgres-service:/var/lib/postgresql/data
    
  ksql:
    image: confluentinc/cp-ksql-server:latest
    hostname: ksql
    container_name: ksql
    ports:
      - 8088:8088
    networks:
      - clusternet
    restart: always
    environment:
      KSQL_BOOTSTRAP_SERVERS: broker_1:9092
      KSQL_LISTENERS: http://0.0.0.0:8088, http://ksql:8081
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
    
networks: 
  clusternet:
    attachable: true